---
- name: MySQL | Import Galera Cluster GPG key
  rpm_key:
    key: https://releases.galeracluster.com/GPG-KEY-galeracluster.com
    state: present
  when: ansible_os_family == "RedHat"

- name: MySQL | check if appstream module is enabled
  ansible.builtin.command: "dnf -y -C module list mysql"
  register: mysql_module_result
  changed_when: false
  when: ansible_os_family == "RedHat" and installation_method == "repo"
  tags: install_packages, install_mysql

- name: MySQL | disable appstream module
  ansible.builtin.command: "dnf -y -C module disable mysql"
  when: ansible_os_family == "RedHat" and installation_method == "repo"
  tags: install_packages, install_mysql

- name: MYSQL | remove conflicting packages
  ansible.builtin.package:
    name: "{{ item }}"
    state: absent
  loop: "{{ mysql_conflicting_packages }}"
  when: ansible_os_family == "RedHat" and installation_method == "repo"
  tags: install_packages, install_mysql

- name: Install MySQL packages
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop: "{{ mysql_packages }}"
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  environment: "{{ proxy_env | default({}) }}"
  when: ansible_os_family == "RedHat" and installation_method == "repo"
  tags: install_packages, install_mysql

- name: Disable mysql systemd unit to prevent cluster from starting in wrong order
  systemd: name=mysqld enabled=no
  when: ansible_os_family == "RedHat" and installation_method == "repo"
  tags: install_packages, install_mysql

- name: Make sure the /software directory exists
  ansible.builtin.file:
    dest: "/software"
    state: directory
    owner: mysql
    group: mysql
  tags: always

- name: Make sure that conf directory exists
  ansible.builtin.file:
    path: "{{ mysql_conf_dir }}"
    state: directory
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    mode: "0750"
  tags: mysql, mysql_conf

- name: Update conf file "{{ mysql_conf }}"
  ansible.builtin.template:
    src: my.cnf.j2
    dest: "{{ mysql_conf }}"
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    mode: "0640"
  tags: mysql, mysql_conf

- name: Update conf file "{{ galera_conf }}"
  ansible.builtin.template:
    src: galera.cnf.j2
    dest: "{{ galera_conf }}"
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    mode: "0640"
  tags: mysql, mysql_conf

- name: XtraBackup configuration
  ansible.builtin.template:
    src: ../xtrabackup/templates/xtrabackup.cnf.j2
    dest: "{{ xtrabackup_conf }}"
    owner: mysql
    group: mysql
    mode: "0644"
  when: xtrabackup_install | bool
  tags: mysql, mysql_conf

- name: Make sure that mysql log directory exists
  ansible.builtin.file:
    path: "{{ mysql_log_dir }}"
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    state: directory
    mode: "0750"
    setype: mysqld_log_t
  tags: mysql, mysql_conf

- name: Create slow query log file.
  ansible.builtin.command: "touch {{ mysql_slow_query_log_file }}"
  args:
    creates: "{{ mysql_slow_query_log_file }}"
  tags: mysql, mysql_conf

- name: Set ownership on slow query log file.
  ansible.builtin.file:
    path: "{{ mysql_slow_query_log_file }}"
    state: file
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    mode: 0640
  tags: mysql, mysql_conf

- name: Create error log file.
  ansible.builtin.command: "touch {{ mysql_error_log_file }}"
  args:
    creates: "{{ mysql_error_log_file }}"
  tags: mysql, mysql_conf

- name: Set ownership on error log file.
  ansible.builtin.file:
    path: "{{ mysql_error_log_file }}"
    state: file
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    mode: 0640
  tags: mysql, mysql_conf

- name: Make sure mysql unix socket directory exists.
  ansible.builtin.file:
    path: "{{ mysql_unix_socket_dir }}"
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    state: directory
    mode: "0750"
    setype: mysqld_var_run_t
  tags: mysql, mysql_conf

- name: Make sure mysql pid directory exists
  ansible.builtin.file:
    path: "{{ mysql_pid_dir }}"
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    state: directory
    mode: "0755"
    setype: mysqld_var_run_t
  tags: mysql, mysql_conf

- name: Make sure mysql data directory exists
  ansible.builtin.file:
    path: "{{ mysql_data_dir }}"
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    state: directory
    mode: "0755"
    setype: mysqld_db_t
  tags: mysql, mysql_conf

- name: Make sure mysql log_bin directory exists
  ansible.builtin.file:
    path: "{{ mysql_log_bin_dir }}"
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    state: directory
    mode: "0755"
    setype: mysqld_db_t
  tags: mysql, mysql_conf

- name: Make sure mysql lsn directory exists
  ansible.builtin.file:
    path: "{{ mysql_extra_lsn_dir }}"
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    state: directory
    mode: "0755"
    setype: mysqld_db_t
  tags: mysql, mysql_conf

- name: selinux | set mysql_connect_any  flag to enable tcp connections
  ansible.posix.seboolean:
    name: "{{ item }}"
    state: true
    persistent: true
  loop:
    - mysql_connect_any
  tags: mysql, mysql_conf

- name: Allow MySQL and Galera ports on SELinux
  community.general.seport:
    ports: "{{ item.port }}"
    proto: "{{ item.proto }}"
    setype: mysqld_port_t
    state: present
  loop:
    - { port: "{{ mysql_port }}", proto: "tcp" }
    - { port: "{{ galera_state_transfer_port }}", proto: "tcp" }
    - { port: "{{ galera_port }}", proto: "tcp" }
    - { port: "{{ galera_port }}", proto: "udp" }
    - { port: "{{ galera_incremental_state_transfer_port }}", proto: "tcp" }
  tags: mysql, mysql_conf

- name: Allow MySQL to modify /software/mysql/data
  community.general.sefcontext:
    target: "{{ mysql_data_dir }}(/.*)?"
    setype: mysqld_db_t
    state: present
  loop:
    - "{{ mysql_data_dir }}(/.*)?"
    - "/var/lib/mysql-files/(/.*)?"
    - "/var/lib/mysql-keyring/(/.*)?"
  tags: mysql, mysql_conf

- name: Allow MySQL to modify /var/log/mysql
  community.general.sefcontext:
    target: "{{ mysql_log_dir }}(/.*)?"
    setype: mysqld_log_t
    state: present
  tags: mysql, mysql_conf

- name: Allow MySQL to modify /var/run/mysqld
  community.general.sefcontext:
    target: "{{ mysql_pid_dir }}(/.*)?"
    setype: mysqld_var_run_t
    state: present
  tags: mysql, mysql_conf

- name: Allow MySQL to modify /var/run/mysqld
  community.general.sefcontext:
    target: "{{ mysql_pid_dir }}/mysql.sock"
    setype: mysqld_var_run_t
    state: present
  tags: mysql, mysql_conf

- name: Apply SELinux file context changes
  command: restorecon -Rv {{ item }}
  loop:
    - "{{ mysql_data_dir }}"
    - "/var/lib/mysql"
    - "{{ mysql_log_dir }}"
    - "{{ mysql_pid_dir }}"
    - "{{ mysql_unix_socket_dir }}"
    - "/var/lib/mysql-files"
  tags: mysql, mysql_conf

- name: Put SELinux in permissive mode, logging actions that would be blocked.
  ansible.posix.selinux:
    policy: targeted
    state: permissive

- name: Disable SELinux
  ansible.posix.selinux:
    state: disabled

- name: Stop slave mysql nodes
  systemd: state=stopped name=mysqld
  when: inventory_hostname in groups['replica']
  tags: install_packages, install_mysql

- name: Wait 20 seconds to safely shutdown all slave mysql nodes
  pause:
    seconds: 20
  tags: install_packages, install_mysql

- name: Stop Primary Mysql Node
  systemd: state=stopped name=mysqld
  when: inventory_hostname == groups['master']
  tags: install_packages, install_mysql

- name: Bootstarping Primary Mysql Node
  shell: /usr/bin/mysqld_bootstrap
  when: inventory_hostname in groups['master']
  any_errors_fatal: true
  become: true
  tags: mysql, mysql_conf

- name: Find temporary password
  shell: "echo `grep 'temporary.*root@localhost' /var/log/mysql/mysql-error.log | sed 's/.*root@localhost: //'`"
  register: mysql_root_password_temp
  when: inventory_hostname in groups['master']
  tags: mysql, mysql_conf

- name: Wait 5 seconds after bootstarping Primary Mysql Node
  pause:
    seconds: 5
  tags: mysql, mysql_conf

- name: Set new password from temporary password
  shell: 'mysql -e "SET PASSWORD = PASSWORD(''{{ mysql_root_password }}'');" --connect-expired-password -uroot -p"{{ mysql_root_password_temp.stdout }}"'
  when: inventory_hostname in groups['master']
  tags: mysql, mysql_conf

- name: Start all Mysql nodes
  ansible.builtin.service:
    state: started
    name: mysqld
  when: inventory_hostname in groups['replica']
  any_errors_fatal: true
  tags: mysql, mysql_conf

- name: Set mysql root user password and only allow access to root user from HAProxy and localhost
  shell: |
    mysql -u root -p'{{ mysql_root_password }}' -e "
    CREATE USER 'root'@'{{ item }}' IDENTIFIED BY '{{ mysql_root_password }}';
    GRANT ALL PRIVILEGES ON *.* TO 'root'@'{{ item }}' WITH GRANT OPTION;
    FLUSH PRIVILEGES;"
  loop:
    - 127.0.0.1
    - localhost
  ignore_errors: true
  when: inventory_hostname == groups['mysql_cluster'][0]
  tags: mysql, mysql_conf, post-install

- name: Set global password configuration to 0
  shell: |
    mysql -u root -p'{{ mysql_root_password }}' -e "
    SET GLOBAL validate_password_policy=0;
    SET GLOBAL validate_password_special_char_count=0;
    SET GLOBAL validate_password_mixed_case_count=0;
    SET GLOBAL validate_password_number_count=0;
    SET GLOBAL validate_password_length=0;"
  ignore_errors: true
  tags: mysql, mysql_conf, post-install
  when: inventory_hostname == groups['mysql_cluster'][0]

- name: Create haproxy mysql user to perform basic health checks
  shell: |
    mysql -u root -p'{{ mysql_root_password }}' -e "
    CREATE USER 'haproxy_user'@'{{ item }}';
    FLUSH PRIVILEGES;"
  loop: "{{ groups['balancers'] | flatten(1) }}"
  ignore_errors: true
  tags: mysql, mysql_conf, post-install
  when: inventory_hostname == groups['mysql_cluster'][0]

- name: Include users tasks.
  include_tasks: users.yml
  tags: mysql, mysql_conf, post-install

---

- name: Make sure that conf directory exists
  ansible.builtin.file:
    path: "{{ mysql_conf_dir }}"
    state: directory
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    mode: "0750"
  tags: mysql, mysql_conf

- name: Make sure that mysql log directory exists
  ansible.builtin.file:
    path: "{{ mysql_log_dir }}"
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    state: directory
    mode: "0750"
    setype: mysqld_log_t
  tags: mysql, mysql_conf

- name: Create slow query log file.
  ansible.builtin.command: "touch {{ mysql_slow_query_log_file }}"
  args:
    creates: "{{ mysql_slow_query_log_file }}"
  tags: mysql, mysql_conf

- name: Set ownership on slow query log file.
  ansible.builtin.file:
    path: "{{ mysql_slow_query_log_file }}"
    state: file
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    mode: 0640
  tags: mysql, mysql_conf

- name: Create error log file.
  ansible.builtin.command: "touch {{ mysql_error_log_file }}"
  args:
    creates: "{{ mysql_error_log_file }}"
  tags: mysql, mysql_conf

- name: Set ownership on error log file.
  ansible.builtin.file:
    path: "{{ mysql_error_log_file }}"
    state: file
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    mode: 0640
  tags: mysql, mysql_conf

- name: Make sure mysql unix socket directory exists.
  ansible.builtin.file:
    path: "{{ mysql_unix_socket_dir }}"
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    state: directory
    mode: "0750"
    setype: mysqld_var_run_t
  tags: mysql, mysql_conf

- name: Make sure mysql pid directory exists
  ansible.builtin.file:
    path: "{{ mysql_pid_dir }}"
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    state: directory
    mode: "0755"
    setype: mysqld_var_run_t
  tags: mysql, mysql_conf

- name: Make sure mysql data directory exists
  ansible.builtin.file:
    path: "{{ mysql_data_dir }}"
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    state: directory
    mode: "0755"
    setype: mysqld_db_t
  tags: mysql, mysql_conf

- name: Update conf file "/etc/my.cnf"
  ansible.builtin.template:
    src: templates/my.cnf.j2
    dest: "{{ mysql_conf }}"
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    mode: "0640"
  tags: mysql, mysql_conf

- name: Update conf file "/etc/mysql/conf.d/galera.cnf"
  ansible.builtin.template:
    src: templates/galera.cnf.j2
    dest: "{{ galera_conf }}"
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    mode: "0640"
  tags: mysql, mysql_conf

- name: selinux | set mysql_connect_any  flag to enable tcp connections
  ansible.posix.seboolean:
    name: "{{ item }}"
    state: true
    persistent: true
  loop:
    - mysql_connect_any
  tags: mysql, mysql_conf

- name: Allow MySQL and Galera ports on SELinux 
  community.general.seport:
    ports: "{{ item.port }}"
    proto: "{{ item.proto }}"
    setype: mysqld_port_t
    state: present 
  loop:
    - { port: "{{ mysql_port }}", proto: 'tcp' } 
    - { port: "{{ galera_state_transfer_port }}", proto: 'tcp' } 
    - { port: "{{ galera_port }}", proto: 'tcp' } 
    - { port: "{{ galera_port }}", proto: 'udp' } 
    - { port: "{{ galera_incremental_state_transfer_port }}", proto: 'tcp' } 
  tags: mysql, mysql_conf

- name: Allow MySQL to modify /software/mysql/data
  community.general.sefcontext:
    target: "{{ mysql_data_dir }}(/.*)?"
    setype: mysqld_db_t
    state: present
  loop:
    - "{{ mysql_data_dir }}(/.*)?"
    - "/var/lib/mysql-files/(/.*)?"
    - "/var/lib/mysql-keyring/(/.*)?"
  tags: mysql, mysql_conf

- name: Allow MySQL to modify /var/log/mysql
  community.general.sefcontext:
    target: "{{ mysql_log_dir }}(/.*)?"
    setype: mysqld_log_t
    state: present
  tags: mysql, mysql_conf

- name: Allow MySQL to modify /var/run/mysqld
  community.general.sefcontext:
    target: "{{ mysql_pid_dir }}(/.*)?"
    setype: mysqld_var_run_t
    state: present
  tags: mysql, mysql_conf

- name: Allow MySQL to modify /var/run/mysqld
  community.general.sefcontext:
    target: "{{ mysql_pid_dir }}/mysql.sock"
    setype: mysqld_var_run_t
    state: present
  tags: mysql, mysql_conf

- name: Apply SELinux file context changes
  command: restorecon -Rv {{ item }}
  loop:
    - "{{ mysql_data_dir }}"
    - "/var/lib/mysql"
    - "{{ mysql_log_dir }}"
    - "{{ mysql_pid_dir }}"
    - "{{ mysql_unix_socket_dir }}"
    - "/var/lib/mysql-files"
  tags: mysql, mysql_conf

- name: Put SELinux in permissive mode, logging actions that would be blocked.
  ansible.posix.selinux:
    policy: targeted
    state: permissive

- name: Disable SELinux
  ansible.posix.selinux:
    state: disabled

- name: Stop mysql nodes
  ansible.builtin.service:
    state: stopped
    name: mysqld
  tags: mysql, mysql_conf

- name: Bootstarping Primary Mysql Node
  shell: /usr/bin/mysqld_bootstrap
  when: inventory_hostname in groups['master']
  any_errors_fatal: true
  become: true
  tags: mysql, mysql_conf

- name: Start all Mysql nodes
  ansible.builtin.service:
    state: started
    name: mysqld
  when: inventory_hostname in groups['replica']
  any_errors_fatal: true
  tags: mysql, mysql_conf

- name: Find temporary password
  shell: "echo `grep 'temporary.*root@localhost' /var/log/mysql/mysql-error.log | sed 's/.*root@localhost: //'`"
  register: mysql_root_password_temp
  when: inventory_hostname in groups['master']
  tags: mysql, mysql_conf

- name: Set new password from temporary password
  shell: 'mysql -e "SET PASSWORD = PASSWORD(''{{ mysql_root_password }}'');" --connect-expired-password -uroot -p"{{ mysql_root_password_temp.stdout }}"'
  when: inventory_hostname in groups['master']
  tags: mysql, mysql_conf

- name: Set mysql root user password and only allow access to root user from HAProxy and localhost
  community.mysql.mysql_user:
    login_user: root
    login_password: '{{ mysql_root_password }}'
    name: root
    host: "{{ item }}"
    check_implicit_admin: yes
    password: '{{ mysql_root_password }}'
    priv: '*.*:ALL'
    state: present
    update_password: always
  when: inventory_hostname == groups['mysql_cluster'][0]
  loop:
    - "{{ groups['balancers'] }}"
    - 127.0.0.1
    - "localhost"
  tags: mysql, mysql_conf, post-install

- name: Create haproxy mysql user to perform basic health checks 
  community.mysql.mysql_user:
    login_user: root
    login_password: '{{ mysql_root_password }}'
    name: haproxy_user
    host: "{{ item }}"
    state: present
    check_implicit_admin: yes
  loop:
    - "{{ groups['balancers'] }}"
  tags: mysql, mysql_conf, post-install

- name: Include users tasks.
  include_tasks: users.yml
  tags: mysql, mysql_conf, post-install
...
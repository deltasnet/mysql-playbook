---

# DNS servers (/etc/resolv.conf)
nameservers: []
#  - "8.8.8.8"  # example (Google Public DNS)
#  - "9.9.9.9"  # (Quad9 Public DNS)

# /etc/hosts (optional)
etc_hosts: []
#  - "10.128.64.143 pgbackrest.minio.local minio.local s3.eu-west-3.amazonaws.com"  # example (MinIO)
#  - ""

ntp_enabled: false  # or 'true' if you want to install and configure the ntp service
ntp_servers: []
#  - "10.128.64.44"
#  - "10.128.64.45"

timezone: ""
# timezone: "Etc/UTC"
# timezone: "America/New_York"
# timezone: "Europe/Moscow"
# timezone: "Europe/Berlin"

# Generate locale
# (except RHEL>=8,use glibc-langpack)
locale_gen:
  - { language_country: "en_US", encoding: "UTF-8" }
#  - { language_country: "ru_RU", encoding: "UTF-8" }
#  - { language_country: "de_DE", encoding: "UTF-8" }
#  - { language_country: "", encoding: "" }

# Set system locale (LANG,LC_ALL)
locale: "en_US.utf-8"

# Configure swap space (if not already exists)
swap_file_create: true  # or 'false'
swap_file_path: /swapfile
swap_file_size_mb: '2048'  # change this value for your system

# Kernel parameters
sysctl_set: true  # or 'false'
# these parameters for example! Specify kernel options for your system
sysctl_conf:
  master: []
  replica: []
  mysql_cluster:
    - { name: "vm.swappiness", value: "1" }
    - { name: "vm.dirty_ratio", value: "15" }
    - { name: "vm.dirty_background_ratio", value: "5" }
    - { name: "net.core.netdev_max_backlog", value: "50000" }
    - { name: "net.core.somaxconn", value: "1024" }
    - { name: "net.ipv4.tcp_tw_reuse", value: "1" }
    - { name: "net.ipv4.ip_local_port_range", value: "32768 60999" }
  balancers:
    - { name: "net.ipv4.ip_nonlocal_bind", value: "1" }
    - { name: "net.ipv4.ip_forward", value: "1" }
    - { name: "net.ipv4.ip_local_port_range", value: "10000 65535" }
    - { name: "net.core.netdev_max_backlog", value: "10000" }
    - { name: "net.ipv4.tcp_max_syn_backlog", value: "8192" }
    - { name: "net.core.somaxconn", value: "65535" }
    - { name: "net.ipv4.tcp_tw_reuse", value: "1" }


# Transparent Huge Pages
disable_thp: true  # or 'false'

# Max open file limit
set_limits: true  # or 'false'
limits_user: "mysql"
soft_nofile: 65536
hard_nofile: 200000



# SSH Keys (optional)
enable_ssh_key_based_authentication: false  # or 'true' for configure SSH Key-Based Authentication
ssh_key_user: "mysql"
ssh_key_state: "present"
ssh_known_hosts: "{{ groups['mysql_cluster'] }}"


# sudo
sudo_users:
  - name: "mysql"
    nopasswd: "yes"  # or "no" to require a password
    commands: "ALL"

# Firewall
firewall_enabled_at_boot: false  # or 'true' for configure firewall (iptables)

firewall_allowed_tcp_ports_for:
  master: []
  replica: []
  mysql_cluster:
    - "{{ ansible_ssh_port | default(22) }}"
    - "{{ mysql_port }}"

  balancers:
    - "{{ ansible_ssh_port | default(22) }}"
    - "{{ haproxy_listen_port.master }}"  # HAProxy (read/write) master
    - "{{ haproxy_listen_port.replicas }}"  # HAProxy (read only) all replicas
    - "{{ haproxy_listen_port.replicas_sync }}"  # HAProxy (read only) synchronous replica only
    - "{{ haproxy_listen_port.replicas_async }}"  # HAProxy (read only) asynchronous replicas only
    - "{{ haproxy_listen_port.stats }}"  # HAProxy stats

firewall_additional_rules_for:
  master: []
  replica: []
  mysql_cluster: []
  balancers:
    - "iptables -p vrrp -A INPUT -j ACCEPT"  # Keepalived (vrrp)
    - "iptables -p vrrp -A OUTPUT -j ACCEPT"  # Keepalived (vrrp)

# disable firewalld (installed by default on RHEL/CentOS) or ufw (installed by default on Ubuntu)
firewall_disable_firewalld: true
firewall_disable_ufw: true


# (optional) - Fetch files from the server in the "master" group. These files can later be copied to all servers.
fetch_files_from_master: []
#  - { src: "/etc/ssl/certs/ssl-cert-snakeoil.pem", dest: "files/ssl-cert-snakeoil.pem" }
#  - { src: "/etc/ssl/private/ssl-cert-snakeoil.key", dest: "files/ssl-cert-snakeoil.key" }
#  - { src: "/path/to/myfile", dest: "files/myfile" }

# (optional) - Copy this files to all servers in the cluster ("master" and "replica" groups)
copy_files_to_all_server: []
#  - { src: "files/ssl-cert-snakeoil.pem", dest: "/etc/ssl/certs/ssl-cert-snakeoil.pem", owner: "postgres", group: "postgres", mode: "0644" }
#  - { src: "files/ssl-cert-snakeoil.key", dest: "/etc/ssl/private/ssl-cert-snakeoil.key", owner: "postgres", group: "postgres", mode: "0600" }
#  - { src: "files/myfile", dest: "/path/to/myfile", owner: "postgres", group: "postgres", mode: "0640" }

...
